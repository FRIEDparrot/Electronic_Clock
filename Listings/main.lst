C51 COMPILER V9.60.7.0   MAIN                                                              12/23/2023 19:44:44 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: E:\Keil5\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE INCDIR(.\public;.\LED_function;.\Timer_fun
                    -ction) DEBUG OBJECTEXTEND PRINT(.\Listings\main.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          #include "public.h"
   2          #include "LED_controller.h"
   3          #include "timer_controller.h"
   4          
   5          #define LED_COL_PORT P0 
   6          sbit K1 = P3^1; 
   7          sbit K2 = P3^0; 
   8          sbit K3 = P3^2; 
   9          sbit K4 = P3^3;
  10          sbit BEEP = P2^5;
  11          
  12          static u8 hour = 0, min = 0,  sec = 0, day = 0;   // note day from Sunday to Saturday
  13          static u8 Alm_hour = 0, Alm_min = 0, Alm_sec = 0; 
  14          static u8 Tim_hour = 0, Tim_min = 0, Tim_sec = 0, Tim_xms = 0;    // for timer
  15          static u8 Stp_hour = 0, Stp_min = 0, Stp_sec = 0, Stp_xms = 0; // for stopwatch 
  16          
  17          // trigger interruption when timer0 overflows
  18          void TIMER0_triggered() interrupt 1{
  19   1          static u8 msecnt = 0;
  20   1          TH0 = 0x4c; TL0 = 0x00;  // trigger every 50ms 
  21   1          msecnt++;
  22   1          if (msecnt == 20){   // reset the clock
  23   2              msecnt = 0;
  24   2              if (sec <59) {sec += 1;}
  25   2              else if (min < 59) { min +=1; sec = 0;}
  26   2              else if (hour < 23) { hour +=1; min =0; sec = 0;}
  27   2              else {day = (day+1)%7; hour = 0; min = 0; sec = 0;} 
  28   2          }
  29   1      }
  30          
  31          // Delay approx to 16 ms in func 
  32          void ShowCurrentTime(u8 state){ // because second is self-increasing, we need another function for set cor
             -rect time
  33   1          // calculate current time.
  34   1          if (sec >= 60 || sec < 0){ sec = (sec+60)%60;}
  35   1          if (min >= 60 || min < 0){ min = (min+60) % 60;}
  36   1          if (hour>= 24 || hour < 0){ hour = (hour+24) %24;}
  37   1          if (day >= 7  || day < 0) { day = (day+7) % 7;}
  38   1          // represent which day in a week
  39   1          LED_ShowDateTime(hour, min, sec, day, state);
  40   1      }
  41          
  42          u16 blink_tick = 0; // record the blink time 
  43          u8 setstate = 0; u16 setstatetick = 0; // must be put outside the loop function (calculate each loop) 
  44          u8 Timer_On = 0 , StpWatch_On = 0;
  45          u8 StopWatch_Overflow = 0;
  46          u8 AlarmRing = 0;   // alarmring signal  
  47          
  48          // Change the state after each cycle 
  49          void StateTickChange(void){
  50   1          if (setstatetick > 5000){ // if the button K1 is not pressed about 6 seconds, exit setting mode
  51   2              setstatetick = 0; setstate = 0;
  52   2          }else if (setstate!=0){   // check if setstate is on; 
  53   2              setstatetick+= 15;
C51 COMPILER V9.60.7.0   MAIN                                                              12/23/2023 19:44:44 PAGE 2   

  54   2          }
  55   1          blink_tick = (blink_tick + 20)%1000;
  56   1      }
  57          
  58          // choose which timer should be set in which way 
  59          void SetTime(u8 clockNum, u8 setway){
  60   1          // unit 3 clocks into 1 calculate way
  61   1          u8 h_add = 0, m_add = 0, s_add = 0, d_add = 0;
  62   1          switch (setway) // 0: set to 0, 1: +1;  2: -1;
  63   1          {
  64   2          case 0:
  65   2              switch (clockNum) // set to zero
  66   2              {
  67   3              case 0: h_add = 24 - hour; m_add = 60 - min; s_add = 60 - sec; d_add = 7 - day; break;
  68   3              case 1: h_add = 24 - Alm_hour; m_add = 60 - Alm_min; s_add = 60 - Alm_sec; break;
  69   3              case 2: h_add = 100 - Tim_hour; m_add = 60 - Tim_min; s_add = 60 - Tim_sec; break; // note the ran
             -ge of timer is 100 hours
  70   3              default: break;
  71   3              } break;
  72   2          case 1: h_add = 1; m_add = 1; s_add = 1; d_add = 1; break;
  73   2          case 2: if(clockNum == 2)
  74   2                      h_add = 99;
  75   2                  else
  76   2                      h_add = 23;
  77   2                  m_add = 59; s_add = 59; d_add = 6; break;
  78   2          default: break;
  79   2          }
  80   1      
  81   1          switch (clockNum)
  82   1          {
  83   2          case 0:
  84   2              switch (setstate)
  85   2              {
  86   3              case 1: hour = (hour+h_add)%24; break;
  87   3              case 2: min =  (min+m_add)%60; break;
  88   3              case 3: sec =  (sec+s_add)%60; break;  // reset the crystal timer 
  89   3              case 4: day =  (day+d_add)%7; break;
  90   3              default: break;
  91   3              } break;
  92   2          case 1: 
  93   2              switch (setstate)
  94   2              {
  95   3              case 1: Alm_hour =(Alm_hour + h_add)%24; break;
  96   3              case 2: Alm_min = (Alm_min + m_add)%60; break;
  97   3              case 3: Alm_sec = (Alm_sec + s_add)%60; break;
  98   3              default: break;
  99   3              }break;
 100   2          case 2: // only use in timer
 101   2              switch (setstate)
 102   2              {
 103   3              case 1: Tim_hour =(Tim_hour + h_add)%100; break;
 104   3              case 2: Tim_min = (Tim_min + m_add)%60; break;
 105   3              case 3: Tim_sec = (Tim_sec + s_add)%60; break;
 106   3              default: break;
 107   3              } break;
 108   2          default:
 109   2              break;
 110   2          }
 111   1          setstatetick = 0; // reset the blink time memory
 112   1      }
 113          
 114          // called when change the state 
C51 COMPILER V9.60.7.0   MAIN                                                              12/23/2023 19:44:44 PAGE 3   

 115          void ResetStateTimer(void){
 116   1          setstate = 0; setstatetick = 0; blink_tick = 0;
 117   1      }
 118          
 119          /*timer1 Region*/
 120          // trigger interruption when timer1 overflows
 121          
 122          // for stopwatch, we only need to write the function in the 
 123          void TIMER1_triggered() interrupt 3{
 124   1          TH1 = 0xdc; TL1 = 0x00; // trigger every 10ms
 125   1          if (Timer_On){
 126   2              Tim_xms++;
 127   2              if (Tim_xms == 100){
 128   3                  if (Tim_sec > 0) Tim_sec--;
 129   3                  else if (Tim_min > 0) {Tim_sec = 59; Tim_min--;}
 130   3                  else if (Tim_hour > 0){Tim_sec = 59; Tim_min = 59; Tim_hour--;}
 131   3                  Tim_xms = 0;
 132   3              }
 133   2          }
 134   1          if (StpWatch_On){
 135   2              Stp_xms++;
 136   2              if (Stp_xms == 100){
 137   3                  Stp_xms = 0;
 138   3                  if (Stp_sec < 59) {Stp_sec++;}
 139   3                  else if (Stp_min < 59) { Stp_min++; Stp_sec = 0;}
 140   3                  else if (Stp_hour < 99) {Stp_hour++; Stp_min = 0; Stp_sec = 0;}
 141   3                  else {// Overflow and reset the StopWatch 
 142   4                      StopWatch_Overflow = 1; AlarmRing = 1;
 143   4                      StpWatch_On = 0;
 144   4                      Stp_hour = 0; Stp_sec = 0; Stp_min = 0;
 145   4                  }
 146   3              }
 147   2          }
 148   1      }
 149          
 150          void RingBeep(u8 ringmode){  // ringmode = 0: cl ringmode = 1: err
 151   1          u16 wtime = 0;
 152   1          blink_tick = 0;
 153   1          while (AlarmRing){
 154   2              if (ringmode== 0){
 155   3                  LED_ShowChar(3, 0x39); 
 156   3                  LED_ShowChar(4, 0x38);
 157   3              }else{
 158   3                  LED_ShowChar(0, 0x79);
 159   3                  LED_ShowChar(1, 0x50);
 160   3                  LED_ShowChar(2, 0x50);
 161   3              }
 162   2      
 163   2              if (wtime < 750 && blink_tick < 120){
 164   3                  BEEP = !BEEP;
 165   3              }
 166   2              Delay(1);
 167   2              wtime = wtime > 1200? 0: wtime + 1;
 168   2              blink_tick = blink_tick > 200 ? 0 : blink_tick + 1;
 169   2              if (!(K1 && K2 && K3 && K4)){
 170   3                  Delay(10);
 171   3                  if (!(K1 && K2 && K3 && K4)){
 172   4                      AlarmRing = 0;
 173   4                  }
 174   3              }
 175   2          }
 176   1          while (!(K1 && K2 && K3 && K4));
C51 COMPILER V9.60.7.0   MAIN                                                              12/23/2023 19:44:44 PAGE 4   

 177   1          BEEP = 1; blink_tick = 0;
 178   1      }
 179          
 180          void main(){
 181   1          u8 mode = 0;
 182   1          u8 AlarmOn = 0;   // if using the alarm
 183   1          LED_SelfCheck();
 184   1          P2_6 = 1, P2_7 = 1;
 185   1          TIMER0_START();     // start the timer 
 186   1          TIMER1_START();  
 187   1          while (1){
 188   2              /* Clock Mode */ 
 189   2              if (mode == 0){ // clock mode 
 190   3                  // switch between extinguished or lightened
 191   3                  if (blink_tick < 500){ // 0.5s as blink loop    
 192   4                      ShowCurrentTime(setstate);
 193   4                  }else{
 194   4                      ShowCurrentTime(0);
 195   4                  }
 196   3                  StateTickChange();
 197   3                  if (!K1){
 198   4                      u16 K1_time = 0; // don't use u8
 199   4                      Delay(10);
 200   4                      while (!K1){
 201   5                          if (K1_time < 1000) K1_time++;
 202   5                          Delay(1);
 203   5                      }
 204   4                      if (K1_time > 700){ // change to mode 1
 205   5                          mode = 1; P2_7 = 0, P2_6 = 1; // change to mode 1
 206   5                          ResetStateTimer();
 207   5                      } else if (K1_time > 0){
 208   5                          setstate = (setstate + 1)%5; 
 209   5                          setstatetick = 0;
 210   5                          // reset the tick and wait for another 5s
 211   5                      }
 212   4                      // no need to add while (!K1) again
 213   4                  }
 214   3                  if (!K2){
 215   4                      Delay(10);
 216   4                      if (!K2 && setstate != 0){
 217   5                          SetTime(0,2);
 218   5                          while (!K2);
 219   5                      }
 220   4                  }
 221   3                  if (!K3){
 222   4                      Delay(10);
 223   4                      if (!K3 && setstate != 0){
 224   5                          SetTime(0, 1);
 225   5                          while (!K3);
 226   5                      }
 227   4                  }
 228   3                  if (!K4){
 229   4                      Delay(10);
 230   4                      if (!K4){
 231   5                          SetTime(0,0);
 232   5                          if (setstate == 3) {
 233   6                              TH0 = 0xee; TL0 = 0x00;
 234   6                          }
 235   5                          while (!K4);            
 236   5                      }
 237   4                  }
 238   3                  // only ring alarm when in clock mode 
C51 COMPILER V9.60.7.0   MAIN                                                              12/23/2023 19:44:44 PAGE 5   

 239   3                  if (AlarmOn&& hour == Alm_hour && min == Alm_min && sec == Alm_sec){
 240   4                      AlarmRing = 1;
 241   4                  }
 242   3              }/* Alarm Setting Mode*/
 243   2              else if (mode == 1){ // alarm mode 
 244   3                  if (blink_tick < 500){ // blink cycle 0.6s
 245   4                      LED_ShowDateTime(Alm_hour, Alm_min, Alm_sec, 7, 0);
 246   4                  }else{
 247   4                      LED_ShowDateTime(Alm_hour, Alm_min, Alm_sec, 7, setstate);
 248   4                  }
 249   3                  if (AlarmOn == 0) LED_ShowChar(7, 0x71); // F,  from high digit to low digit
 250   3                  else LED_ShowChar(7, 0x73);              // P
 251   3                  StateTickChange();
 252   3                  if (!K1) {
 253   4                      u16 cnt = 0;
 254   4                      Delay(10);
 255   4                      while (!K1) {
 256   5                          if (cnt < 2000) cnt++;
 257   5                          Delay(1);
 258   5                      }
 259   4                      if (cnt > 700) {
 260   5                          mode =2; P2_6 = 0; P2_7 = 1;
 261   5                          ResetStateTimer();
 262   5                      }
 263   4                      else if (cnt > 0){
 264   5                          setstate = (setstate + 1)%4; // from 0 to 3 to set h, m and s
 265   5                          setstatetick = 0; // reset the setting
 266   5                      }
 267   4                  }
 268   3                  if (!K2){
 269   4                      Delay(10);
 270   4                      if (!K2 && setstate!=0){
 271   5                          SetTime(1, 2);
 272   5                          while (!K2);
 273   5                      }
 274   4                  }
 275   3                  if (!K3){
 276   4                      Delay(10);
 277   4                      if (!K3 && setstate!=0){
 278   5                          SetTime(1, 1);
 279   5                          while (!K3);
 280   5                      }
 281   4                  }
 282   3                  if (!K4){
 283   4                      Delay(10);
 284   4                      if(!K4){
 285   5                          if (setstate == 0){
 286   6                              AlarmOn = !AlarmOn;
 287   6                          }else{
 288   6                              SetTime(1, 0);
 289   6                          }
 290   5                          while (!K4);
 291   5                      }
 292   4                  }
 293   3                  
 294   3              }
 295   2              else if (mode == 2){ // Timer mode
 296   3                  if (blink_tick < 500){ 
 297   4                      LED_ShowDateTime(Tim_hour, Tim_min, Tim_sec, 7, 0);
 298   4                  }else{
 299   4                      LED_ShowDateTime(Tim_hour, Tim_min, Tim_sec, 7, setstate);
 300   4                  }
C51 COMPILER V9.60.7.0   MAIN                                                              12/23/2023 19:44:44 PAGE 6   

 301   3                  StateTickChange();
 302   3                  if (!K1) {
 303   4                      u16 cnt = 0;
 304   4                      Delay(10);
 305   4                      while (!K1) {
 306   5                          if (cnt < 1000) cnt++;
 307   5                          Delay(1);
 308   5                      }
 309   4                      if (cnt > 800) {
 310   5                          mode = 3; P2_6 = 0; P2_7 = 0;
 311   5                          // not reset timer 1 here;
 312   5                          ResetStateTimer();
 313   5                      }
 314   4                      else if (cnt > 0){
 315   5                          setstate = (setstate + 1)%4; // from 0 to 3 to set h, m and s
 316   5                          setstatetick = 0; // reset the setting 
 317   5                      }
 318   4                  }
 319   3                  if (!K2) {
 320   4                      Delay(10);
 321   4                      if (!K2){
 322   5                          SetTime(2, 2);
 323   5                          while(!K2);
 324   5                      }
 325   4                  }
 326   3                  if (!K3) {
 327   4                      Delay(10);
 328   4                      if (!K3){
 329   5                          SetTime(2,1);
 330   5                          while(!K3);
 331   5                      }
 332   4                  }
 333   3                  if (!K4) { // 
 334   4                      u16 k4ms = 0;
 335   4                      Delay(10);
 336   4                      while (!K4){
 337   5                          if (k4ms < 1500) k4ms++;
 338   5                          Delay(1);
 339   5                      }
 340   4                      if (k4ms > 800){
 341   5                          Timer_On = 0; // reset the timer 
 342   5                          Tim_hour = 0;  Tim_min = 0; Tim_sec = 0; Tim_xms = 0;
 343   5                      }
 344   4                      else if (k4ms > 0){
 345   5                          if (setstate == 0) { 
 346   6                          // start the timer or pause the Timer 
 347   6                          Timer_On = !Timer_On;
 348   6                          }
 349   5                          else{
 350   6                              SetTime(2,0);
 351   6                          }
 352   5                      }
 353   4                  }
 354   3              }
 355   2              else if (mode == 3){ // stopwatch mode 
 356   3                  u8 xms_show = 0;
 357   3                  xms_show = Stp_xms;
 358   3                  LED_ShowExactTime(Stp_hour,Stp_min, Stp_sec, xms_show); // show 
 359   3                  if (!K1) {
 360   4                      u16 cnt = 0;
 361   4                      Delay(10);
 362   4                      while (!K1) {
C51 COMPILER V9.60.7.0   MAIN                                                              12/23/2023 19:44:44 PAGE 7   

 363   5                          if (cnt < 1000) cnt++;
 364   5                          Delay(1);
 365   5                      }
 366   4                      if (cnt > 800) {
 367   5                          mode = 0; P2_6 = 1; P2_7 = 1;
 368   5                          ResetStateTimer();
 369   5                      }
 370   4                      else if (cnt > 0){
 371   5                          StpWatch_On = !StpWatch_On;
 372   5                      }
 373   4                  }
 374   3                  if (!K4) {
 375   4                      u16 cnt = 0;
 376   4                      Delay(10);
 377   4                      if (!K4){
 378   5                          StpWatch_On = 0;
 379   5                          Stp_hour = 0;  Stp_min = 0; Stp_sec = 0; Stp_xms = 0;
 380   5                      }
 381   4                      while (!K4);
 382   4                  }
 383   3              }
 384   2              
 385   2              // if need to ring the beep 
 386   2              if (Timer_On && Tim_sec == 0 && Tim_min == 0 && Tim_hour == 0){
 387   3                  Timer_On = 0; Tim_xms = 0; AlarmRing = 1;
 388   3              }
 389   2              if (AlarmRing) RingBeep(StopWatch_Overflow); // check if beep need to ring
 390   2          }
 391   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2073    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     25      10
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
